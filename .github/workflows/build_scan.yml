name: IoTGoat Build and scan

on:
  push:
    branches: [ "Develop" ]
  pull_request:
    branches: [ "Develop" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: install gcc
      run: |
        sudo apt-get -y update && sudo apt-get -y install gcc
        sudo apt-get -y install build-essential
        
    - name: make
      run: |
        cd OpenWrt/openwrt-18.06.2/
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        make menuconfig # select your preferred configuration for the toolchain, target system & firmware packages.
        make # Build your firmware with make. This will download all sources, build the cross-compile toolchain and then cross-compile the Linux kernel & all chosen applications for your target system.

    - name: Upload binary generated file
        uses: actions/upload-artifact@v3
        with:
          name: binary-artifact
          path: /IoTGoat_binaryname

    - name: Binary Scan
        uses: FiniteStateInc/binary-scan@v3.0.0
        id: binary_scan
        with:
          finite-state-client-id: ${{ secrets.CLIENT_ID }}
          finite-state-secret: ${{ secrets.CLIENT_SECRET }}
          finite-state-organization-context: ${{ secrets.ORGANIZATION_CONTEXT }}
          asset-id: ${{env.ASSET_ID}}
          version: ${{github.sha}} 
          file-path: /IoTGoat_binaryname
          github-token: ${{ secrets.GITHUB_TOKEN }} 
          automatic-comment: true 
          
      - name: Set response of binary scan
        if: steps.binary_scan.outcome=='success'
        id: set_response
        run: |
          echo Asset version URL: ${{steps.binary_scan.outputs.asset-version-url}}
          echo Response: "${{steps.binary_scan.outputs.response}}"
          echo Error: "${{steps.binary_scan.outputs.error}}"

      - name: Download SBOMs
        run: |
          curl -X POST https://platform.finitestate.io/api/launch-export-job -d {"jobName":"CYCLONEDX_EXPORT_JOB_LAUNCHED","currentUserId":"${{secret.userId}}","jobConfig":{"org_id":"${{secret.org_id}}","export_config":{"export_type":"CYCLONEDX","org_id":"${{secret.org_id}}","asset_version_id":"${{secret.asset_version_id}}","include_sbom":false,"include_vdr":true,"export_name":"${{secret.export_name}}","skip_file_sbom_elements":false,"skip_dependencies":false}}}
          sbom_url=$(curl -X POST https://platform.finitestate.io/api/graphql -d {"operationName":"AllExportJobs","variables":{"filter":{"createdBy":{"id":"${{secret.userId}}"}},"orderBy":"createdAt_DESC"},"query":"query AllExportJobs($filter: ExportJobFilter, $orderBy: [ExportJobOrderBy!]) {\n  allExportJobs(filter: $filter, orderBy: $orderBy) {\n    id\n    _cursor\n    _revision\n    workflowId\n    assetVersion {\n      asset {\n        id\n        name\n        __typename\n      }\n      id\n      name\n      __typename\n    }\n    completedDateTime\n    config\n    createdAt\n    createdBy {\n      id\n      email\n      __typename\n    }\n    name\n    product {\n      id\n      name\n      __typename\n    }\n    requestedDateTime\n    status\n    type\n    updatedAt\n    __typename\n  }\n}"} | jq -r .url)
          curl ${sbom_url} -o IoTGoat_sbom.cdx.json
          curl -X PUT https://uploads.github.com/MacnicaDevOps/SBOMs/releases/${RELEASE_ID}/assets?name=IoTGoat_sbom.cdx.json -d @IoTGoat_sbom.cdx.json
          
      - name: Triage
        if: steps.binary_scan.outcome=='success'
        id: set_response
        run: |
          ./reform.sh FiniteStateOutput.json
          ./triage.sh
        
    outputs:
      ASSET_VERSION_URL: ${{steps.binary_scan.outputs.asset-version-url}}
      ERROR: ${{steps.binary_scan.outputs.error}}
      RESPONSE: ${{steps.binary_scan.outputs.response}}
      
